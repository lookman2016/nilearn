.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py>` to download the full example code or to run this example in your browser via Binder
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py:


Extracting signals of a probabilistic atlas of functional regions
=================================================================

This example extracts the signal on regions defined via a probabilistic
atlas, to construct a functional connectome.

We use the `MSDL atlas
<https://team.inria.fr/parietal/18-2/spatial_patterns/spatial-patterns-in-resting-state/>`_
of functional regions in movie-watching.

The key to extract signals is to use the
:class:`nilearn.input_data.NiftiMapsMasker` that can transform nifti
objects to time series using a probabilistic atlas.

As the MSDL atlas comes with (x, y, z) MNI coordinates for the different
regions, we can visualize the matrix as a graph of interaction in a
brain. To avoid having too dense a graph, we represent only the 20% edges
with the highest values.

Retrieve the atlas and the data
--------------------------------


.. code-block:: default

    from nilearn import datasets
    atlas = datasets.fetch_atlas_msdl()
    # Loading atlas image stored in 'maps'
    atlas_filename = atlas['maps']
    # Loading atlas data stored in 'labels'
    labels = atlas['labels']

    # Load the functional datasets
    data = datasets.fetch_development_fmri(n_subjects=1)

    print('First subject resting-state nifti image (4D) is located at: %s' %
          data.func[0])


Extract the time series
------------------------


.. code-block:: default

    from nilearn.input_data import NiftiMapsMasker
    masker = NiftiMapsMasker(maps_img=atlas_filename, standardize=True,
                             memory='nilearn_cache', verbose=5)

    time_series = masker.fit_transform(data.func[0],
                                       confounds=data.confounds)


`time_series` is now a 2D matrix, of shape (number of time points x
number of regions)


.. code-block:: default

    print(time_series.shape)


Build and display a correlation matrix
---------------------------------------


.. code-block:: default

    from nilearn.connectome import ConnectivityMeasure
    correlation_measure = ConnectivityMeasure(kind='correlation')
    correlation_matrix = correlation_measure.fit_transform([time_series])[0]

    # Display the correlation matrix
    import numpy as np
    from nilearn import plotting
    # Mask out the major diagonal
    np.fill_diagonal(correlation_matrix, 0)
    plotting.plot_matrix(correlation_matrix, labels=labels, colorbar=True,
                         vmax=0.8, vmin=-0.8)

And now display the corresponding graph
----------------------------------------


.. code-block:: default

    from nilearn import plotting
    coords = atlas.region_coords

    # We threshold to keep only the 20% of edges with the highest value
    # because the graph is very dense
    plotting.plot_connectome(correlation_matrix, coords,
                             edge_threshold="80%", colorbar=True)

    plotting.show()


3D visualization in a web browser
---------------------------------
An alternative to :func:`nilearn.plotting.plot_connectome` is to use
:func:`nilearn.plotting.view_connectome` that gives more interactive
visualizations in a web browser. See :ref:`interactive-connectome-plotting`
for more details.


.. code-block:: default



    view = plotting.view_connectome(correlation_matrix, coords, edge_threshold='80%')

    # In a Jupyter notebook, if ``view`` is the output of a cell, it will
    # be displayed below the cell
    view



.. code-block:: default


    # uncomment this to open the plot in a web browser:
    # view.open_in_browser()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/emdupre/nilearn/gh-pages?filepath=examples/auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_probabilistic_atlas_extraction.py <plot_probabilistic_atlas_extraction.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_probabilistic_atlas_extraction.ipynb <plot_probabilistic_atlas_extraction.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
