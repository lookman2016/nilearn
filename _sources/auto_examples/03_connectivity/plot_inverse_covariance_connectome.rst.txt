.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_inverse_covariance_connectome.py>` to download the full example code or to run this example in your browser via Binder
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_inverse_covariance_connectome.py:


Computing a connectome with sparse inverse covariance
=======================================================

This example constructs a functional connectome using the sparse inverse
covariance.

We use the `MSDL atlas
<https://team.inria.fr/parietal/18-2/spatial_patterns/spatial-patterns-in-resting-state/>`_
of functional regions in movie watching, and the
:class:`nilearn.input_data.NiftiMapsMasker` to extract time series.

Note that the inverse covariance (or precision) contains values that can
be linked to *negated* partial correlations, so we negated it for
display.

As the MSDL atlas comes with (x, y, z) MNI coordinates for the different
regions, we can visualize the matrix as a graph of interaction in a
brain. To avoid having too dense a graph, we represent only the 20% edges
with the highest values.

Retrieve the atlas and the data
--------------------------------


.. code-block:: default

    from nilearn import datasets
    atlas = datasets.fetch_atlas_msdl()
    # Loading atlas image stored in 'maps'
    atlas_filename = atlas['maps']
    # Loading atlas data stored in 'labels'
    labels = atlas['labels']

    # Loading the functional datasets
    data = datasets.fetch_development_fmri(n_subjects=1)

    # print basic information on the dataset
    print('First subject functional nifti images (4D) are at: %s' %
          data.func[0])  # 4D data


Extract time series
--------------------


.. code-block:: default

    from nilearn.input_data import NiftiMapsMasker
    masker = NiftiMapsMasker(maps_img=atlas_filename, standardize=True,
                             memory='nilearn_cache', verbose=5)

    time_series = masker.fit_transform(data.func[0],
                                       confounds=data.confounds)


Compute the sparse inverse covariance
--------------------------------------


.. code-block:: default

    try:
        from sklearn.covariance import GraphicalLassoCV
    except ImportError:
        # for Scitkit-Learn < v0.20.0
        from sklearn.covariance import GraphLassoCV as GraphicalLassoCV

    estimator = GraphicalLassoCV()
    estimator.fit(time_series)


Display the connectome matrix
------------------------------


.. code-block:: default

    from nilearn import plotting
    # Display the covariance

    # The covariance can be found at estimator.covariance_
    plotting.plot_matrix(estimator.covariance_, labels=labels,
                         figure=(9, 7), vmax=1, vmin=-1,
                         title='Covariance')


And now display the corresponding graph
----------------------------------------


.. code-block:: default

    coords = atlas.region_coords

    plotting.plot_connectome(estimator.covariance_, coords,
                             title='Covariance')



Display the sparse inverse covariance
--------------------------------------
we negate it to get partial correlations


.. code-block:: default

    plotting.plot_matrix(-estimator.precision_, labels=labels,
                         figure=(9, 7), vmax=1, vmin=-1,
                         title='Sparse inverse covariance')


And now display the corresponding graph
----------------------------------------


.. code-block:: default

    plotting.plot_connectome(-estimator.precision_, coords,
                             title='Sparse inverse covariance')

    plotting.show()


3D visualization in a web browser
---------------------------------
An alternative to :func:`nilearn.plotting.plot_connectome` is to use
:func:`nilearn.plotting.view_connectome` that gives more interactive
visualizations in a web browser. See :ref:`interactive-connectome-plotting`
for more details.


.. code-block:: default



    view = plotting.view_connectome(-estimator.precision_, coords)

    # In a Jupyter notebook, if ``view`` is the output of a cell, it will
    # be displayed below the cell
    view



.. code-block:: default


    # uncomment this to open the plot in a web browser:
    # view.open_in_browser()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_03_connectivity_plot_inverse_covariance_connectome.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/emdupre/nilearn/gh-pages?filepath=examples/auto_examples/03_connectivity/plot_inverse_covariance_connectome.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_inverse_covariance_connectome.py <plot_inverse_covariance_connectome.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_inverse_covariance_connectome.ipynb <plot_inverse_covariance_connectome.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
